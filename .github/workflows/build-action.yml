name: Build Extension

on:
  push:
    branches: [ '*' ]
    tags: [ '*' ]
  pull_request: 
    types: [ opened, reopened, ready_for_review ]

jobs:
  build_ext:
    name: Build for ${{ matrix.identifier }}
    runs-on: ${{ matrix.os_version }}

    strategy:
      fail-fast: false
      matrix:
        buildjobs:
          - windows-latest
          - linux-stable

        include:
          - meta_branch: "1.12-dev"
            sm_branch: "1.12-dev"
            sdks_to_fetch: 'tf2 dods css bms sdk2013 orangebox hl2dm'
          
          - buildjobs: windows-latest
            os_version: windows-latest
            identifier: 'Windows Latest (x86)'
            ambuild_target: 'x86,x86_64'
            package_name: 'windows-x86'
            libsym_ext: 'dll'
            dbgsym_ext: 'pdb'
            build_sdks: 'tf2,dods,css,bms,sdk2013,orangebox,hl2dm'

          - buildjobs: linux-stable
            os_version: ubuntu-20.04
            identifier: 'Linux'
            cc: clang-9
            cxx: clang++-9
            ambuild_target: 'x86,x86_64'
            package_name: 'linux-stable'
            libsym_ext: 'so'
            dbgsym_ext: 'dbg'
            build_sdks: 'tf2,dods,css,bms,sdk2013,orangebox,hl2dm'

    steps:
      - name: Install Packages (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y ${{ matrix.cc }} ${{ matrix.cxx }} g++-multilib
          echo "CC=${{ matrix.cc }}" >> $GITHUB_ENV
          echo "CXX=${{ matrix.cxx }}" >> $GITHUB_ENV

      - name: Setup Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version: '3.12'
  
      - name: Setup AMBuild
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install git+https://github.com/alliedmodders/ambuild

      - name: Fetch Metamod:Source ${{ matrix.meta_branch }}
        uses: actions/checkout@v4.2.2
        with:
          repository: alliedmodders/metamod-source
          ref: ${{ matrix.meta_branch }}
          path: mmsource
          submodules: recursive
    
      - name: Fetch SourceMod ${{ matrix.sm_branch }}
        uses: actions/checkout@v4.2.2
        with:
          repository: alliedmodders/sourcemod
          ref: ${{ matrix.sm_branch }}
          path: sourcemod
          submodules: recursive
      
      - name: Fetch SDKs
        shell: bash
        run: |
          git clone --mirror https://github.com/alliedmodders/hl2sdk hl2sdk-proxy-repo
          sdks=(${{ matrix.sdks_to_fetch }})
          for sdk in "${sdks[@]}"
          do
            git clone hl2sdk-proxy-repo -b $sdk hl2sdk-$sdk
          done
          ls -lah

      - name: Fetch Extension
        uses: actions/checkout@v4.2.2
        with:
          path: navbot
          submodules: recursive

      - name: Build Extension For ${{ matrix.ambuild_target }}
        working-directory: navbot
        run: |
          mkdir build
          cd build
          python3 ../configure.py --sdks="${{ matrix.build_sdks }}" --sm-path="${{ github.workspace }}/sourcemod" --mms-path="${{ github.workspace }}/mmsource" --enable-optimize --targets "${{ matrix.ambuild_target }}" --symbol-files
          ambuild

      - name: Get commit SHA
        uses: benjlevesque/short-sha@v3.0
        id: short-sha

      - name: Upload Extension as Artifact
        uses: actions/upload-artifact@v4.4.3
        with:
          name: navbot-${{ matrix.package_name }}-${{ steps.short-sha.outputs.sha }}
          path: |
              navbot/build/package/*

      - name: Upload Debugging Symbols Artifact
        uses: actions/upload-artifact@v4.4.3
        with:
          name: navbot-dbgsym-${{ matrix.package_name }}-${{ steps.short-sha.outputs.sha }}
          path: |
              navbot/build/**/*.${{ matrix.dbgsym_ext }}
            
  compile_plugins:
    name: Compile Plugins
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        sm_version: [ '1.12.x' ]
    env:
      SOURCEFILES_PATH: ${{ github.workspace }}/sourcefiles
      TPINCLUDES_PATH: ${{ github.workspace }}/thirdparty/includes
      NAVBOTINC_PATH: ${{ github.workspace }}/navbot/scripting/include
      BUILD_PATH: ${{ github.workspace }}/navbot/scripting
      PACKAGE_PATH: ${{ github.workspace }}/build/package
      CONFIGS_PATH: ${{ github.workspace }}/build/package/addons/sourcemod/configs
      SMDATA_PATH: ${{ github.workspace }}/build/package/addons/sourcemod/data
      GAMEDATA_PATH: ${{ github.workspace }}/build/package/addons/sourcemod/gamedata
      BINARY_PATH: ${{ github.workspace }}/build/package/addons/sourcemod/plugins
      LOC_PATH: ${{ github.workspace }}/build/package/addons/sourcemod/translations
      RELEASE_PLUGINS: 'navbot_admin.sp'

    steps:
      - name: Fetch Extension
        uses: actions/checkout@v4.2.2
        with:
          path: navbot
          submodules: recursive

      - name: Get short SHA
        uses: benjlevesque/short-sha@v3.0
        id: short-sha
      
      - name: Setup SourcePawn Compiler ${{ matrix.sm_version }}
        id: setup_sp
        uses: rumblefrog/setup-sp@master
        with:
          version: ${{ matrix.sm_version }}
      
      - name: Create Folders
        run: |
          echo "Creating folders..."
          mkdir -p ${{ env.TPINCLUDES_PATH }}
          mkdir -p ${{ env.BUILD_PATH }}
          mkdir -p ${{ env.CONFIGS_PATH }}
          mkdir -p ${{ env.SMDATA_PATH }}
          mkdir -p ${{ env.GAMEDATA_PATH }}
          mkdir -p ${{ env.BINARY_PATH }}
          mkdir -p ${{ env.LOC_PATH }}

      - name: Compile Plugins
        if: startsWith(github.ref, 'refs/tags/') == false
        working-directory: ${{ env.BUILD_PATH }}
        run: |
          for file in *.sp; do
            echo -e "\nCompiling $file..."
            spcomp -O2 -v2 -i ${{ env.TPINCLUDES_PATH }}/ -i ${{ env.NAVBOTINC_PATH }}/ $file
          done
          echo "===OUT FILES==="
          ls -lah *.smx

      - name: Compile Plugins (Release)
        if: startsWith(github.ref, 'refs/tags/') == true
        working-directory: ${{ env.BUILD_PATH }}
        run: |
          plugins=(${{ env.RELEASE_PLUGINS }})
          for file in "${plugins[@]}"
          do
            echo -e "\nCompiling $file..."
            spcomp -O2 -v2 -i ${{ env.TPINCLUDES_PATH }}/ -i ${{ env.NAVBOTINC_PATH }}/ $file
          done
          echo "===OUT FILES==="
          ls -lah *.smx

      - name: Move Compiled Plugins to Package Directory
        run: |
          rsync -rv ${{ env.BUILD_PATH }}/*.smx ${{ env.BINARY_PATH }}/

      - name: Upload Compiled Plugins Artifact
        uses: actions/upload-artifact@v4.4.3
        with:
          name: navbot-sm-plugins-${{ steps.short-sha.outputs.sha }}
          path: |
            build/package/*

  do_release:
    name: Create GH Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: [ build_ext, compile_plugins ]

    steps:
      - name: Create Folders
        run: |
          mkdir -p ${{ github.workspace }}/upload/
          mkdir -p ${{ github.workspace }}/download/windows/
          mkdir -p ${{ github.workspace }}/download/linux/
          mkdir -p ${{ github.workspace }}/download/shared/
          mkdir -p ${{ github.workspace }}/download/symbols/files/

      - name: Download Artifacts (Windows)
        uses: actions/download-artifact@v4.1.8
        with:
          pattern: 'navbot-windows*'
          merge-multiple: true
          path: ${{ github.workspace }}/download/windows/

      - name: Download Artifacts (Linux)
        uses: actions/download-artifact@v4.1.8
        with:
          pattern: 'navbot-linux*'
          merge-multiple: true
          path: ${{ github.workspace }}/download/linux/
  
      - name: Download Artifacts (Shared)
        uses: actions/download-artifact@v4.1.8
        with:
          pattern: '*sm-plugins*'
          merge-multiple: true
          path: ${{ github.workspace }}/download/shared/

      - name: Download Debugging Symbols
        uses: actions/download-artifact@v4.1.8
        with:
          pattern: '*dbgsym*'
          merge-multiple: true
          path: ${{ github.workspace }}/download/symbols/files/

      - name: Create Package
        run: |
          cd ${{ github.workspace }}/download/windows/
          rsync -rv ${{ github.workspace }}/download/shared/* ${{ github.workspace }}/download/windows/
          7z a -r "navbot-windows-${{ github.ref_name }}.7z" addons
          ls -lah
          mv *.7z ${{ github.workspace }}/upload/
          cd ${{ github.workspace }}/download/linux/
          rsync -rv ${{ github.workspace }}/download/shared/* ${{ github.workspace }}/download/linux/
          tar -czf "navbot-linux-${{ github.ref_name }}.tar.gz" --owner=0 --group=0 addons
          ls -lah
          mv *.tar.gz ${{ github.workspace }}/upload/
          cd ${{ github.workspace }}/download/symbols/
          tar -czf "navbot-debug-symbols-${{ github.ref_name }}.tar.gz" --owner=0 --group=0 files
          ls -lah
          mv *.tar.gz ${{ github.workspace }}/upload/
          cd ${{ github.workspace }}/upload/
          ls -lah

      - name: Create Pre-release
        uses: softprops/action-gh-release@v2.1.0
        if: contains(github.ref_name, 'pr') == true
        with:
          name: "NavBot ${{ github.ref_name }}"
          generate_release_notes: true
          prerelease: true
          files: |
            upload/*.7z
            upload/*.tar.gz

      - name: Create Release
        uses: softprops/action-gh-release@v2.1.0
        if: contains(github.ref_name, 'pr') == false
        with:
          name: "NavBot ${{ github.ref_name }}"
          generate_release_notes: true
          prerelease: false
          files: |
            upload/*.7z
            upload/*.tar.gz

    